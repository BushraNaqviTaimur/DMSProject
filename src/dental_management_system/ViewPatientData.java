
package dental_management_system;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
/**
 * @author bushra
 */
public class ViewPatientData extends javax.swing.JFrame 
{
    User user;
    ResultSet rs; 
    
    public ViewPatientData() 
    {
        initComponents();
        this.setLocationRelativeTo(null); // for centering form on screen
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE); //does not close app on exit of window
    }
    public ViewPatientData(User user) {
        initComponents();
        this.setLocationRelativeTo(null); // for centering form on screen
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE); //does not close app on exit of window
        
        this.user = user;
        
        
        if("Receptionist".equals(user.userType))
        {
            Receptionist recept = new Receptionist(user.userName,user.password,user.userType);
            
            
            
            
            
            try
                {

                rs = recept.ShowAllPatientsData();
                    
                while(jTable1_patientshistory.getRowCount() > 0) 
                {
                    ((DefaultTableModel) jTable1_patientshistory.getModel()).removeRow(0);

                }


                /* 
                Whenever you query the database using a statement like for
                example SELECT, the result given back from database is stored in
                ResetSet type object. Every ResultSet consists of meta data. A meta data
                is basically a blueprint of ResultSet having info like how many rows and
                columns does a ResultSet have, what data type these rows and columns have,
                name of table, rows and columns names etc. Whenever we need this kind of info
                from a ResultSet, we make use of its meta data.             
                */
                int columns = rs.getMetaData().getColumnCount();


                while(rs.next())
                {  

                    Object[] row = new Object[columns];
                    for (int i = 1; i <= columns; i++)
                    {  
                        row[i - 1] = rs.getObject(i);
                    }
                    ((DefaultTableModel) jTable1_patientshistory.getModel()).insertRow(rs.getRow()-1,row);
                }

            }
        catch (Exception e)
        {
                
        }  
            
        }
        
        
        if("Doctor".equals(user.userType))
        {
            Doctor doc = new Doctor(user.userName,user.password,user.userType);
          
           jMenu_insert.disable(); //none of the below menuitem actions will show
            
            
                try
                {
                    
                rs = doc.ShowAllPatientsData();

                while(jTable1_patientshistory.getRowCount() > 0) 
                {
                    ((DefaultTableModel) jTable1_patientshistory.getModel()).removeRow(0);

                }


                int columns = rs.getMetaData().getColumnCount();


                while(rs.next())
                {  

                    Object[] row = new Object[columns];
                    for (int i = 1; i <= columns; i++)
                    {  
                        row[i - 1] = rs.getObject(i);
                    }
                    ((DefaultTableModel) jTable1_patientshistory.getModel()).insertRow(rs.getRow()-1,row);
                }

                }
                catch (Exception e)
                {

                }  
            
        }

         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1_patientshistory = new javax.swing.JTable();
        jButton1_search = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1_file = new javax.swing.JMenu();
        jMenuItem_refresh = new javax.swing.JMenuItem();
        jMenu_insert = new javax.swing.JMenu();
        jMenuItem1_Add = new javax.swing.JMenuItem();
        jMenuItem2_Update = new javax.swing.JMenuItem();
        jMenuItem3_delete = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 255, 255));
        setPreferredSize(new java.awt.Dimension(724, 471));
        setResizable(false);
        setSize(new java.awt.Dimension(724, 471));
        getContentPane().setLayout(null);

        jTable1_patientshistory.setBackground(new java.awt.Color(0, 102, 255));
        jTable1_patientshistory.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jTable1_patientshistory.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jTable1_patientshistory.setForeground(new java.awt.Color(255, 255, 255));
        jTable1_patientshistory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Patient ID", "Full Name", "Contact", "PDH", "PMH", "PSH", "DHx"
            }
        ));
        jTable1_patientshistory.setBounds(new java.awt.Rectangle(0, 0, 900, 800));
        jTable1_patientshistory.setMinimumSize(new java.awt.Dimension(900, 800));
        jTable1_patientshistory.setPreferredSize(new java.awt.Dimension(900, 800));
        jScrollPane1.setViewportView(jTable1_patientshistory);
        if (jTable1_patientshistory.getColumnModel().getColumnCount() > 0) {
            jTable1_patientshistory.getColumnModel().getColumn(0).setHeaderValue("Patient ID");
            jTable1_patientshistory.getColumnModel().getColumn(1).setHeaderValue("Full Name");
            jTable1_patientshistory.getColumnModel().getColumn(2).setHeaderValue("Contact");
            jTable1_patientshistory.getColumnModel().getColumn(3).setHeaderValue("PDH");
            jTable1_patientshistory.getColumnModel().getColumn(4).setHeaderValue("PMH");
            jTable1_patientshistory.getColumnModel().getColumn(5).setHeaderValue("PSH");
            jTable1_patientshistory.getColumnModel().getColumn(6).setHeaderValue("DHx");
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(0, 90, 710, 340);

        jButton1_search.setBackground(new java.awt.Color(255, 255, 255));
        jButton1_search.setText("Search");
        jButton1_search.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_searchActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1_search);
        jButton1_search.setBounds(587, 29, 110, 50);

        jTextField1.setBackground(new java.awt.Color(0, 153, 255));
        getContentPane().add(jTextField1);
        jTextField1.setBounds(50, 30, 520, 50);

        jMenuBar1.setBackground(new java.awt.Color(121, 228, 255));

        jMenu1_file.setText("File");

        jMenuItem_refresh.setText("Refresh");
        jMenuItem_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem_refreshActionPerformed(evt);
            }
        });
        jMenu1_file.add(jMenuItem_refresh);

        jMenuBar1.add(jMenu1_file);

        jMenu_insert.setText("Functions");

        jMenuItem1_Add.setText("Add new record");
        jMenuItem1_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1_AddActionPerformed(evt);
            }
        });
        jMenu_insert.add(jMenuItem1_Add);

        jMenuItem2_Update.setText("Update existing record");
        jMenuItem2_Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2_UpdateActionPerformed(evt);
            }
        });
        jMenu_insert.add(jMenuItem2_Update);

        jMenuItem3_delete.setText("Delete record");
        jMenuItem3_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3_deleteActionPerformed(evt);
            }
        });
        jMenu_insert.add(jMenuItem3_delete);

        jMenuBar1.add(jMenu_insert);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1_AddActionPerformed
     new InsertPatientData(user).setVisible(true);       
    }//GEN-LAST:event_jMenuItem1_AddActionPerformed

    private void jMenuItem2_UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2_UpdateActionPerformed
        
        if(jTable1_patientshistory.getRowCount() == 1)
        {
            Patient patient = new Patient();
            patient.ID = Integer.parseInt(jTable1_patientshistory.getValueAt(0,0).toString());
            patient.name = jTable1_patientshistory.getValueAt(0,1).toString();
            patient.phoneNumber = Integer.parseInt(jTable1_patientshistory.getValueAt(0,2).toString());
            patient.pastDentalhistory = jTable1_patientshistory.getValueAt(0,3).toString();
            patient.pastMedicalhistory = jTable1_patientshistory.getValueAt(0,4).toString();
            patient.pastSurgicalhistory = jTable1_patientshistory.getValueAt(0,5).toString();
            patient.pastDrughistory = jTable1_patientshistory.getValueAt(0,6).toString();
        
            Receptionist recept = new  Receptionist(user.userName,user.password,user.userType);
       
            recept.UpdatePatientData(patient);
              
            JOptionPane.showMessageDialog(rootPane, "Record updated successfully.");
        }
        else
        {
            JOptionPane.showMessageDialog(rootPane, "You must first search for a specific patient to update.");
        }
    }//GEN-LAST:event_jMenuItem2_UpdateActionPerformed

    private void jMenuItem3_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3_deleteActionPerformed
        //new DeletePatientData(user).setVisible(true);
        
        int inputID = Integer.parseInt(JOptionPane.showInputDialog("Enter patient ID"));
        
        Patient patient = new Patient();
        patient.ID = inputID;
        
        Receptionist recept = new  Receptionist(user.userName,user.password,user.userType);
       
        recept.DeletePatient(patient);
                
    }//GEN-LAST:event_jMenuItem3_deleteActionPerformed

    private void jMenuItem_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem_refreshActionPerformed
         jTextField1.setText("");
         this.jButton1_searchActionPerformed(evt);       
    }//GEN-LAST:event_jMenuItem_refreshActionPerformed

    private void jButton1_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_searchActionPerformed
        
        if("Doctor".equals(user.userType)) // if user.userType == "Doctor"
        {
            Doctor doc = new Doctor(user.userName,user.password,user.userType);
            rs = doc.SearchPatientsData(jTextField1.getText());
        }
        else
        {
            Receptionist recept = new Receptionist(user.userName,user.password,user.userType);
            rs = recept.SearchPatientsData(jTextField1.getText());
        }
        
        
        try
        {

        
        while(jTable1_patientshistory.getRowCount() > 0) 
        {
            ((DefaultTableModel) jTable1_patientshistory.getModel()).removeRow(0);
        }
        int columns = rs.getMetaData().getColumnCount();
        while(rs.next())
        {  
            Object[] row = new Object[columns];
            for (int i = 1; i <= columns; i++)
            {  
                row[i - 1] = rs.getObject(i);
            }
            ((DefaultTableModel) jTable1_patientshistory.getModel()).insertRow(rs.getRow()-1,row);
        }
        
        
        }
        catch (Exception e)
        {
        
        }
    }//GEN-LAST:event_jButton1_searchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewPatientData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewPatientData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewPatientData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPatientData.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewPatientData().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1_search;
    private javax.swing.JMenu jMenu1_file;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1_Add;
    private javax.swing.JMenuItem jMenuItem2_Update;
    private javax.swing.JMenuItem jMenuItem3_delete;
    private javax.swing.JMenuItem jMenuItem_refresh;
    private javax.swing.JMenu jMenu_insert;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1_patientshistory;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
